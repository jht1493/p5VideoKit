//
function face_mesh_draw(nthis, img, predictions) {
  if (!img) return;
  let layer = nthis.output;
  let ddraw = nthis.ddraw;
  let draw_dots = ddraw === 'dots';
  let draw_rects = ddraw === 'rects';
  let draw_tris = ddraw === 'tris';
  let draw_crop = ddraw === 'crop';
  let draw_pixd = ddraw == 'pixd';
  let out_w = layer.width;
  let out_h = layer.height;
  let mar_h = out_h * (nthis.mar_h / 100);
  let rr = out_h / img.height;
  let align_none = nthis.align === 'none';
  let align_center = nthis.align === 'center';
  let align_right = nthis.align === 'right';
  let col_sum = [0, 0, 0];
  let avg_index = nthis.avg_index;
  let ncol = 0;
  let from = nthis.from;
  let to = nthis.to;
  // console.log('face_mesh_draw from', from, ' to', to);
  if (to > predictions.length) {
    to = predictions.length;
    // console.log('face_mesh_draw to predictions.length', predictions.length);
  }
  for (let i = from; i < to; i++) {
    const pred = predictions[i];
    // console.log('face_mesh_draw pred', pred);
    const keypoints = pred.scaledMesh;
    let [x1k, y1k] = keypoints[10];
    let [x2k, y2k] = keypoints[152];
    x1k = keypoints[234][0];
    x2k = keypoints[454][0];
    if (nthis.box_outter) {
      let box = pred.boundingBox;
      [x1k, y1k] = box.topLeft[0];
      [x2k, y2k] = box.bottomRight[0];
    }
    let x1k0 = x1k;
    let y1k0 = y1k;
    let xlen = x2k - x1k;
    let ylen = y2k - y1k;
    let r1 = (out_h - mar_h * 2) / ylen;
    let x0 = 0; // flush left
    let y0 = mar_h;
    if (align_right) {
      x0 = out_w - xlen * r1;
    } else if (align_center) {
      x0 = (out_w - xlen * r1) / 2;
    } else if (align_none) {
      r1 = rr;
      x1k0 = 0;
      y1k0 = 0;
    }
    if (nthis.box_rect) {
      let x1 = (x1k - x1k0) * r1 + x0;
      let y1 = (y1k - y1k0) * r1 + y0;
      let x2 = (x2k - x1k0) * r1 + x0;
      let y2 = (y2k - y1k0) * r1 + y0;
      layer.stroke(0);
      layer.noFill();
      layer.rect(x1, y1, x2 - x1, y2 - y1);
      layer.noStroke();
    }
    let n = mesh_nits.length;
    if (!avg_index) {
      avg_index = n;
    }
    if (nthis.mask_index) {
      n = nthis.mask_index;
    }
    if (nthis.reveal) {
      nthis.nnits += nthis.reveal;
      if (nthis.nnits >= mesh_nits.length) {
        if (nthis.reveal_full && !nthis.mesh_done) {
          nthis.period_timer.restart();
        }
        nthis.mesh_done = 1;
        nthis.nnits = mesh_nits.length;
      } else {
        nthis.mesh_done = 0;
      }
      n = nthis.nnits;
    } else {
      nthis.mesh_done = 1;
    }
    if (draw_pixd) {
      let x1 = (x1k - x1k0) * r1 + x0;
      let y1 = (y1k - y1k0) * r1 + y0;
      let x2 = (x2k - x1k0) * r1 + x0;
      let y2 = (y2k - y1k0) * r1 + y0;
      let sw = x2k - x1k;
      let sh = y2k - y1k;
      {
        // Create scaled down imaged of source in pixd_img
        let pimg = nthis.pixd_img;
        let ph = pimg.height;
        let pw = Math.floor(ph * (sw / sh));
        pimg.copy(img, x1k, y1k, sw, sh, 0, 0, pw, ph);
        let dw = x2 - x1;
        let dh = y2 - y1;
        let xostep = dw / pw;
        let yostep = dh / ph;
        for (let y = 0; y < ph; y++) {
          for (let x = 0; x < pw; x++) {
            let col = pimg.get(x, y);
            let avg = (col[0] + col[1] + col[2]) / 3;
            layer.fill(avg);
            // layer.fill(col);
            layer.rect(x1 + x * xostep, y1 + y * yostep, xostep, yostep);
            // avg *= 2;
            // if (avg > 255) avg = 255;
            col_sum[0] += avg;
            col_sum[1] += avg;
            col_sum[2] += avg;
            ncol++;
          }
        }
      }
      // dest.copy(srcImage, sx, sy, sw, sh, dx, dy, dw, dh)
      continue;
    }
    if (draw_crop) {
      let x1 = (x1k - x1k0) * r1 + x0;
      let y1 = (y1k - y1k0) * r1 + y0;
      let x2 = (x2k - x1k0) * r1 + x0;
      let y2 = (y2k - y1k0) * r1 + y0;
      let sw = x2k - x1k;
      let sh = y2k - y1k;
      let dw = x2 - x1;
      let dh = y2 - y1;
      layer.copy(img, x1k, y1k, sw, sh, x1, y1, dw, dh);
      for (let j = 0; j < n; j += 3) {
        let [x1, y1] = keypoints[mesh_nits[j]];
        let col = img.get(x1, y1);
        if (j < avg_index) {
          col_sum[0] += col[0];
          col_sum[1] += col[1];
          col_sum[2] += col[2];
          ncol++;
        }
      }
      continue;
    }
    if (draw_dots) {
      let slen = Math.floor(layer.width * (nthis.slen / 100));
      for (let j = 0; j < n; j += 1) {
        let [x, y] = keypoints[mesh_nits[j]];
        let col = img.get(x, y);
        col[3] = nthis.alpha;
        if (j < avg_index) {
          col_sum[0] += col[0];
          col_sum[1] += col[1];
          col_sum[2] += col[2];
          ncol++;
        }
        x = (x - x1k0) * r1 + x0;
        y = (y - y1k0) * r1 + y0;
        layer.fill(col);
        layer.ellipse(x, y, slen, slen);
      }
      continue;
    }
    if (draw_rects) {
      let slen = Math.floor(layer.width * (nthis.slen / 100));
      for (let j = 0; j < n; j += 1) {
        let [x, y] = keypoints[mesh_nits[j]];
        let col = img.get(x, y);
        col[3] = nthis.alpha;
        if (j < avg_index) {
          col_sum[0] += col[0];
          col_sum[1] += col[1];
          col_sum[2] += col[2];
          ncol++;
        }
        x = (x - x1k0) * r1 + x0;
        y = (y - y1k0) * r1 + y0;
        layer.fill(col);
        layer.rect(x, y, slen, slen);
      }
      continue;
    }
    if (draw_tris) {
      let tri_dir = nthis.constructor.tri_dir;
      // let itp = nthis.tri_phase;
      let itp = 0;
      // console.log('tri_dir', tri_dir);
      let slen = Math.floor(layer.width * (nthis.slen / 100));
      for (let j = 0; j < n; j += 1) {
        let [x, y] = keypoints[mesh_nits[j]];
        let col = img.get(x, y);
        col[3] = nthis.alpha;
        if (j < avg_index) {
          col_sum[0] += col[0];
          col_sum[1] += col[1];
          col_sum[2] += col[2];
          ncol++;
        }
        // console.log('itp', itp);
        let td = tri_dir[itp];
        // console.log('td', td);
        // if (j % 10 == 0) {
        itp = (itp + 1) % tri_dir.length;
        // }
        let [t1, t2] = td;
        // console.log('t1', t1, 't2', t2);
        let x1 = (x - x1k0) * r1 + x0;
        let y1 = (y - y1k0) * r1 + y0;
        let x2 = x1 + slen * t1[0];
        let y2 = y1 + slen * t1[1];
        let x3 = x1 + slen * t2[0];
        let y3 = y1 + slen * t2[1];
        layer.fill(col);
        layer.triangle(x1, y1, x2, y2, x3, y3);
      }
      continue;
    }
    for (let j = 0; j < n; j += 3) {
      let [x1, y1] = keypoints[mesh_nits[j]];
      let [x2, y2] = keypoints[mesh_nits[j + 1]];
      let [x3, y3] = keypoints[mesh_nits[j + 2]];
      let col = img.get(x1, y1);
      col[3] = nthis.alpha;
      if (j < avg_index) {
        col_sum[0] += col[0];
        col_sum[1] += col[1];
        col_sum[2] += col[2];
        ncol++;
      }
      x1 = (x1 - x1k0) * r1 + x0;
      y1 = (y1 - y1k0) * r1 + y0;
      x2 = (x2 - x1k0) * r1 + x0;
      y2 = (y2 - y1k0) * r1 + y0;
      x3 = (x3 - x1k0) * r1 + x0;
      y3 = (y3 - y1k0) * r1 + y0;
      layer.fill(col);
      layer.triangle(x1, y1, x2, y2, x3, y3);
    }
  }
  if (ncol > 0) {
    nthis.avg_color[0] = int(col_sum[0] / ncol);
    nthis.avg_color[1] = int(col_sum[1] / ncol);
    nthis.avg_color[2] = int(col_sum[2] / ncol);
  }
}

let mesh_nits = [
  10, 338, 337, 10, 337, 151, 109, 10, 108, 109, 108, 69, 338, 297, 299, 338,
  299, 337, 67, 109, 69, 67, 69, 104, 297, 332, 333, 297, 333, 299, 103, 67,
  104, 103, 104, 68, 332, 284, 298, 332, 298, 333, 108, 10, 151, 108, 151, 107,
  108, 107, 66, 337, 299, 296, 337, 296, 336, 69, 108, 66, 69, 66, 105, 299,
  333, 334, 299, 334, 296, 151, 337, 336, 151, 336, 9, 54, 103, 68, 54, 68, 71,
  284, 251, 301, 284, 301, 298, 104, 69, 105, 104, 105, 63, 333, 298, 293, 333,
  293, 334, 68, 104, 63, 68, 63, 70, 298, 301, 300, 298, 300, 293, 21, 54, 71,
  21, 71, 139, 251, 389, 368, 251, 368, 301, 66, 107, 65, 66, 65, 52, 296, 334,
  282, 296, 282, 295, 105, 66, 52, 105, 52, 53, 334, 293, 283, 334, 283, 282,
  336, 296, 295, 336, 295, 285, 107, 151, 9, 107, 9, 55, 107, 55, 65, 9, 336,
  285, 9, 285, 8, 63, 105, 53, 63, 53, 46, 293, 300, 276, 293, 276, 283, 71, 68,
  70, 71, 70, 156, 301, 368, 383, 301, 383, 300, 65, 55, 221, 65, 221, 222, 295,
  282, 443, 295, 443, 442, 52, 65, 223, 52, 223, 224, 282, 283, 444, 282, 444,
  443, 53, 52, 224, 53, 224, 225, 283, 276, 445, 283, 445, 444, 70, 63, 46, 70,
  46, 124, 300, 383, 353, 300, 353, 276, 285, 295, 441, 285, 441, 413, 55, 9, 8,
  55, 8, 193, 55, 193, 189, 8, 285, 417, 8, 417, 168, 46, 53, 225, 46, 225, 113,
  276, 353, 342, 276, 342, 445, 162, 21, 139, 162, 139, 34, 389, 356, 264, 389,
  264, 368, 223, 65, 222, 223, 222, 28, 223, 28, 27, 443, 444, 259, 443, 259,
  257, 224, 223, 29, 224, 29, 30, 444, 445, 260, 444, 260, 259, 222, 221, 56,
  222, 56, 28, 442, 443, 258, 442, 258, 286, 225, 224, 30, 225, 30, 247, 445,
  342, 467, 445, 467, 260, 139, 71, 156, 139, 156, 143, 368, 264, 372, 368, 372,
  383, 441, 295, 442, 441, 442, 286, 441, 286, 414, 221, 55, 189, 221, 189, 190,
  221, 190, 56, 156, 70, 124, 156, 124, 35, 383, 372, 265, 383, 265, 353, 27,
  28, 158, 27, 158, 159, 257, 259, 386, 257, 386, 385, 28, 56, 157, 28, 157,
  158, 258, 443, 257, 258, 257, 385, 258, 385, 384, 29, 223, 27, 29, 27, 159,
  29, 159, 160, 259, 260, 387, 259, 387, 386, 124, 46, 113, 124, 113, 226, 353,
  265, 446, 353, 446, 342, 168, 417, 6, 417, 285, 413, 417, 413, 465, 417, 465,
  351, 193, 8, 168, 193, 168, 6, 193, 6, 122, 30, 29, 160, 30, 160, 161, 260,
  467, 466, 260, 466, 388, 56, 190, 173, 56, 173, 157, 286, 258, 384, 286, 384,
  398, 159, 158, 153, 159, 153, 145, 386, 387, 373, 386, 373, 374, 113, 225,
  247, 113, 247, 130, 342, 446, 359, 342, 359, 467, 158, 157, 153, 385, 386,
  380, 160, 159, 144, 387, 260, 388, 387, 388, 390, 413, 441, 414, 413, 414,
  463, 413, 463, 464, 189, 193, 245, 189, 245, 244, 189, 244, 243, 157, 173,
  154, 157, 154, 153, 384, 385, 380, 384, 380, 381, 161, 160, 163, 388, 466,
  249, 247, 30, 246, 247, 246, 33, 467, 359, 263, 467, 263, 466, 246, 30, 161,
  246, 161, 7, 190, 189, 243, 190, 243, 133, 190, 133, 173, 414, 286, 398, 414,
  398, 362, 173, 133, 155, 173, 155, 154, 398, 384, 381, 398, 381, 382, 263,
  249, 466, 130, 247, 33, 359, 255, 263, 7, 33, 246, 249, 339, 390, 249, 390,
  388, 226, 113, 130, 446, 261, 255, 446, 255, 359, 133, 243, 112, 133, 112,
  155, 362, 398, 382, 163, 7, 161, 390, 254, 373, 390, 373, 387, 25, 226, 130,
  25, 130, 33, 25, 33, 7, 255, 448, 339, 255, 339, 249, 255, 249, 263, 243, 244,
  233, 243, 233, 112, 463, 414, 362, 463, 362, 341, 463, 341, 453, 155, 112,
  154, 35, 124, 226, 265, 340, 261, 265, 261, 446, 464, 463, 453, 154, 112, 26,
  381, 380, 256, 144, 163, 160, 144, 159, 145, 373, 253, 374, 244, 245, 188,
  244, 188, 128, 244, 128, 233, 143, 156, 35, 372, 345, 340, 372, 340, 265, 153,
  154, 26, 153, 26, 22, 380, 386, 374, 380, 374, 252, 380, 252, 256, 341, 362,
  382, 341, 382, 381, 341, 381, 256, 110, 25, 7, 110, 7, 163, 339, 449, 254,
  339, 254, 390, 112, 233, 232, 112, 232, 26, 465, 413, 464, 465, 464, 357, 465,
  357, 412, 34, 139, 143, 264, 447, 345, 264, 345, 372, 245, 193, 122, 245, 122,
  188, 145, 153, 22, 6, 417, 351, 6, 351, 197, 127, 162, 34, 356, 454, 447, 356,
  447, 264, 26, 232, 22, 351, 465, 412, 351, 412, 419, 122, 6, 197, 122, 197,
  196, 24, 110, 163, 24, 163, 144, 24, 144, 23, 254, 450, 253, 254, 253, 373,
  453, 341, 452, 233, 128, 121, 233, 121, 232, 261, 346, 448, 261, 448, 255, 31,
  35, 226, 31, 226, 25, 23, 144, 145, 23, 145, 22, 253, 451, 252, 253, 252, 374,
  452, 341, 256, 452, 256, 252, 357, 464, 453, 357, 453, 350, 357, 350, 343,
  412, 357, 343, 412, 343, 399, 128, 188, 114, 128, 114, 121, 188, 122, 196,
  188, 196, 174, 188, 174, 114, 448, 347, 449, 448, 449, 339, 228, 31, 25, 228,
  25, 110, 451, 350, 452, 451, 452, 252, 231, 23, 22, 231, 22, 232, 350, 277,
  343, 350, 453, 452, 121, 231, 232, 449, 348, 450, 449, 450, 254, 229, 228,
  110, 229, 110, 24, 229, 24, 230, 450, 349, 451, 450, 451, 253, 230, 24, 23,
  230, 23, 231, 340, 346, 261, 111, 143, 35, 111, 35, 31, 114, 174, 217, 197,
  351, 419, 197, 419, 195, 419, 412, 399, 419, 399, 248, 196, 197, 195, 196,
  195, 3, 349, 329, 277, 349, 277, 350, 349, 350, 451, 120, 230, 231, 120, 231,
  121, 399, 343, 437, 399, 437, 456, 174, 196, 3, 174, 3, 236, 174, 236, 217,
  277, 355, 437, 277, 437, 343, 47, 120, 121, 47, 121, 114, 47, 114, 217, 346,
  352, 280, 346, 280, 347, 346, 347, 448, 117, 111, 31, 117, 31, 228, 116, 34,
  143, 116, 143, 111, 116, 111, 117, 345, 352, 346, 345, 346, 340, 348, 330,
  329, 348, 329, 349, 348, 349, 450, 119, 229, 230, 119, 230, 120, 437, 420,
  456, 347, 280, 330, 347, 330, 348, 347, 348, 449, 118, 117, 228, 118, 228,
  229, 118, 229, 119, 227, 127, 34, 227, 34, 116, 227, 116, 123, 447, 366, 352,
  447, 352, 345, 195, 419, 248, 195, 248, 5, 248, 399, 456, 248, 456, 281, 3,
  195, 5, 3, 5, 51, 329, 371, 355, 329, 355, 277, 100, 119, 120, 100, 120, 47,
  100, 47, 126, 236, 3, 51, 236, 51, 134, 234, 127, 227, 234, 227, 137, 454,
  323, 366, 454, 366, 447, 355, 429, 420, 355, 420, 437, 126, 47, 217, 126, 217,
  198, 420, 360, 363, 420, 363, 456, 198, 217, 236, 198, 236, 134, 330, 425,
  266, 330, 266, 371, 330, 371, 329, 101, 118, 119, 101, 119, 100, 101, 100,
  142, 5, 248, 281, 5, 281, 4, 51, 5, 4, 51, 4, 45, 281, 456, 363, 281, 363,
  275, 363, 440, 275, 134, 51, 45, 371, 266, 358, 371, 358, 429, 371, 429, 355,
  142, 100, 126, 142, 126, 209, 429, 358, 279, 429, 279, 360, 429, 360, 420,
  209, 126, 198, 209, 198, 131, 131, 198, 134, 131, 134, 220, 360, 279, 344,
  360, 344, 440, 360, 440, 363, 123, 116, 117, 123, 117, 50, 352, 376, 411, 352,
  411, 280, 4, 281, 275, 4, 275, 274, 4, 274, 1, 275, 457, 274, 45, 4, 44, 220,
  134, 45, 220, 45, 237, 440, 344, 438, 440, 438, 457, 440, 457, 275, 280, 411,
  425, 280, 425, 330, 50, 117, 118, 50, 118, 101, 50, 101, 36, 279, 278, 344,
  49, 209, 131, 49, 131, 115, 36, 101, 142, 36, 142, 129, 266, 423, 358, 115,
  131, 220, 115, 220, 218, 137, 227, 123, 137, 123, 147, 366, 401, 376, 366,
  376, 352, 237, 45, 44, 237, 44, 241, 331, 294, 278, 331, 278, 279, 102, 129,
  49, 102, 49, 48, 44, 4, 1, 438, 392, 309, 438, 309, 459, 438, 459, 457, 278,
  439, 344, 48, 49, 115, 218, 220, 237, 218, 237, 239, 358, 423, 294, 358, 294,
  331, 358, 331, 279, 129, 142, 209, 129, 209, 49, 239, 237, 238, 459, 309, 458,
  459, 458, 457, 79, 218, 239, 79, 239, 238, 309, 250, 458, 439, 455, 392, 439,
  392, 438, 439, 438, 344, 219, 48, 115, 219, 115, 218, 93, 234, 137, 93, 137,
  177, 323, 361, 401, 323, 401, 366, 125, 241, 44, 125, 44, 1, 354, 370, 19,
  354, 19, 1, 354, 1, 274, 19, 125, 1, 241, 20, 238, 241, 238, 237, 461, 354,
  274, 461, 274, 457, 294, 327, 455, 294, 455, 439, 294, 439, 278, 64, 129, 102,
  64, 102, 48, 64, 48, 219, 458, 461, 457, 166, 219, 218, 166, 218, 79, 166, 79,
  60, 392, 290, 309, 455, 460, 289, 455, 289, 392, 235, 64, 219, 235, 219, 166,
  425, 427, 426, 425, 426, 423, 425, 423, 266, 205, 50, 36, 205, 36, 203, 59,
  235, 166, 59, 166, 75, 289, 460, 305, 289, 305, 392, 20, 60, 79, 20, 79, 238,
  250, 462, 461, 250, 461, 458, 203, 36, 129, 203, 129, 64, 203, 64, 98, 423,
  426, 391, 423, 391, 327, 423, 327, 294, 242, 99, 20, 242, 20, 241, 242, 241,
  125, 462, 326, 370, 462, 370, 354, 462, 354, 461, 141, 242, 125, 141, 125, 19,
  141, 19, 94, 370, 2, 94, 370, 94, 19, 75, 166, 60, 305, 328, 290, 305, 290,
  392, 460, 391, 393, 460, 393, 328, 460, 328, 305, 240, 98, 235, 240, 235, 59,
  240, 59, 75, 290, 328, 250, 290, 250, 309, 327, 391, 460, 327, 460, 455, 98,
  64, 235, 147, 123, 187, 376, 433, 411, 99, 240, 75, 99, 75, 60, 99, 60, 20,
  328, 393, 326, 328, 326, 462, 328, 462, 250, 411, 427, 425, 187, 123, 50, 187,
  50, 205, 97, 99, 242, 97, 242, 141, 97, 141, 2, 326, 164, 2, 326, 2, 370, 2,
  141, 94, 206, 205, 203, 206, 203, 165, 426, 436, 322, 426, 322, 391, 177, 137,
  147, 177, 147, 213, 401, 435, 433, 401, 433, 376, 164, 267, 0, 164, 97, 2,
  393, 269, 267, 393, 267, 164, 393, 164, 326, 167, 240, 99, 167, 99, 97, 167,
  97, 164, 427, 434, 432, 427, 432, 436, 427, 436, 426, 207, 187, 205, 207, 205,
  206, 391, 322, 270, 391, 270, 269, 391, 269, 393, 165, 203, 98, 165, 98, 240,
  165, 240, 167, 92, 206, 165, 92, 165, 40, 92, 40, 185, 322, 410, 409, 322,
  409, 270, 132, 93, 177, 132, 177, 215, 361, 288, 435, 361, 435, 401, 436, 287,
  410, 436, 410, 322, 216, 207, 206, 216, 206, 92, 216, 92, 186, 213, 147, 187,
  433, 416, 411, 37, 167, 164, 37, 164, 0, 37, 0, 72, 267, 303, 302, 267, 302,
  0, 0, 302, 11, 39, 165, 167, 39, 167, 37, 39, 37, 73, 269, 270, 304, 269, 304,
  303, 269, 303, 267, 410, 291, 409, 186, 92, 185, 72, 0, 11, 72, 11, 38, 302,
  271, 268, 302, 268, 11, 40, 165, 39, 40, 39, 74, 40, 74, 183, 270, 409, 408,
  270, 408, 407, 73, 37, 72, 73, 72, 41, 303, 304, 272, 303, 272, 271, 303, 271,
  302, 74, 39, 73, 74, 73, 42, 74, 42, 191, 304, 270, 407, 304, 407, 415, 304,
  415, 272, 185, 40, 184, 185, 184, 62, 409, 292, 408, 12, 38, 11, 268, 312, 12,
  268, 12, 11, 41, 72, 38, 271, 272, 310, 184, 40, 183, 184, 183, 78, 408, 308,
  407, 42, 73, 41, 42, 41, 80, 215, 177, 213, 435, 367, 433, 192, 213, 187, 192,
  187, 207, 416, 364, 434, 416, 434, 427, 416, 427, 411, 183, 74, 191, 183, 191,
  78, 13, 82, 12, 191, 42, 88, 80, 88, 42, 81, 179, 178, 81, 178, 41, 81, 41,
  38, 82, 86, 87, 82, 87, 38, 82, 38, 12, 312, 15, 14, 312, 14, 13, 312, 13, 12,
  311, 316, 317, 311, 317, 268, 311, 268, 271, 310, 403, 402, 310, 402, 271,
  415, 318, 272, 78, 62, 184, 308, 325, 324, 308, 324, 415, 308, 415, 407, 76,
  185, 62, 306, 375, 292, 306, 292, 409, 292, 307, 308, 292, 308, 408, 61, 186,
  185, 61, 185, 76, 291, 375, 306, 291, 306, 409, 178, 80, 41, 87, 81, 38, 14,
  82, 13, 317, 312, 268, 402, 311, 271, 318, 310, 272, 95, 78, 191, 95, 191, 88,
  324, 319, 318, 324, 318, 415, 287, 273, 291, 287, 291, 410, 57, 216, 186, 57,
  186, 61, 96, 77, 78, 96, 78, 95, 325, 320, 319, 325, 319, 324, 89, 96, 95, 89,
  95, 88, 89, 88, 80, 319, 403, 310, 319, 310, 318, 432, 422, 287, 432, 287,
  436, 212, 207, 216, 212, 216, 57, 86, 179, 81, 86, 81, 87, 316, 15, 312, 316,
  312, 317, 179, 89, 80, 179, 80, 178, 403, 315, 316, 403, 316, 311, 403, 311,
  402, 15, 85, 86, 15, 86, 82, 15, 82, 14, 77, 146, 62, 77, 62, 78, 307, 321,
  325, 307, 325, 308, 146, 61, 76, 146, 76, 62, 375, 321, 307, 375, 307, 292,
  90, 91, 96, 90, 96, 89, 320, 405, 404, 320, 404, 319, 214, 192, 207, 214, 207,
  212, 434, 430, 422, 434, 422, 432, 180, 90, 89, 180, 89, 179, 404, 315, 403,
  404, 403, 319, 85, 181, 180, 85, 180, 179, 85, 179, 86, 315, 16, 15, 315, 15,
  316, 16, 85, 15, 91, 146, 77, 91, 77, 96, 321, 405, 320, 321, 320, 325, 43,
  57, 61, 43, 61, 146, 273, 335, 375, 273, 375, 291, 58, 132, 215, 288, 397,
  435, 181, 91, 90, 181, 90, 180, 405, 314, 315, 405, 315, 404, 84, 181, 85, 84,
  85, 16, 314, 18, 17, 314, 17, 16, 314, 16, 315, 17, 84, 16, 138, 215, 213,
  138, 213, 192, 367, 365, 364, 367, 364, 416, 367, 416, 433, 202, 214, 212,
  202, 212, 57, 202, 57, 43, 422, 424, 273, 422, 273, 287, 106, 43, 146, 106,
  146, 91, 335, 406, 321, 335, 321, 375, 182, 106, 91, 182, 91, 181, 406, 313,
  405, 406, 405, 321, 210, 135, 214, 210, 214, 202, 210, 202, 204, 430, 431,
  424, 430, 424, 422, 313, 200, 18, 313, 18, 314, 313, 314, 405, 83, 182, 181,
  83, 181, 84, 135, 138, 192, 135, 192, 214, 364, 394, 430, 364, 430, 434, 204,
  202, 43, 204, 43, 106, 424, 418, 335, 424, 335, 273, 18, 83, 84, 18, 84, 17,
  172, 58, 215, 172, 215, 138, 397, 365, 367, 397, 367, 435, 194, 204, 106, 194,
  106, 182, 418, 421, 406, 418, 406, 335, 211, 210, 204, 211, 204, 194, 431,
  262, 418, 431, 418, 424, 201, 194, 182, 201, 182, 83, 421, 199, 200, 421, 200,
  313, 421, 313, 406, 169, 136, 135, 169, 135, 210, 169, 210, 211, 394, 395,
  431, 394, 431, 430, 200, 201, 83, 200, 83, 18, 136, 172, 138, 136, 138, 135,
  365, 379, 394, 365, 394, 364, 32, 211, 194, 32, 194, 201, 262, 428, 421, 262,
  421, 418, 170, 169, 211, 170, 211, 32, 395, 369, 262, 395, 262, 431, 208, 32,
  201, 428, 199, 421, 199, 208, 201, 199, 201, 200, 150, 136, 169, 150, 169,
  170, 379, 378, 395, 379, 395, 394, 140, 170, 32, 140, 32, 208, 369, 396, 428,
  369, 428, 262, 149, 150, 170, 149, 170, 140, 378, 400, 369, 378, 369, 395,
  171, 140, 208, 171, 208, 199, 396, 175, 199, 396, 199, 428, 175, 171, 199,
  176, 149, 140, 176, 140, 171, 400, 377, 396, 400, 396, 369, 148, 176, 171,
  148, 171, 175, 377, 152, 175, 377, 175, 396, 152, 148, 175,
];

// if (0) {
//   pimg.loadPixels();
//   let n = pimg.pixels.length;
//   // Transform to gray
//   while (n > 0) {
//     n -= 4;
//     col =
//       (pimg.pixels[n] + pimg.pixels[n + 1] + pimg.pixels[n + 2]) / 3;
//     pimg.pixels[n] = col;
//     pimg.pixels[n + 1] = col;
//     pimg.pixels[n + 2] = col;
//   }
//   pimg.updatePixels();
//   let dw = x2 - x1;
//   let dh = y2 - y1;
//   layer.copy(pimg, 0, 0, pw, ph, x1, y1, dw, dh);
// }
